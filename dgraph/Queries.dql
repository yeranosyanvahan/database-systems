query {
  nodes(func: has(node)){
   node
    edge {
  	node
    }
  }
}

query {

 A as var(func: eq(node, 1))
 M as var(func: eq(node, 2))

 path as shortest(from: uid(A), to: uid(M), numpaths: 2, minweight: 2, maxweight: 4) {
  edge @facets(cost)
 }
 path(func: uid(path)) {
   node
 }
}

query {
	me(func: gt(count(~genre), 30000), first: 1) @recurse(depth: 5, loop: true) {
		name@en
		~genre (first:10) @filter(gt(count(starring), 2))
		starring (first: 2)
		performance.actor
	}
}
